/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package domain.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class userRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3309428604161740363L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"userRecord\",\"namespace\":\"domain.avro\",\"fields\":[{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"id\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"location\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"location\",\"fields\":[{\"name\":\"city\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"country\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"screenName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"url\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<userRecord> ENCODER =
      new BinaryMessageEncoder<userRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<userRecord> DECODER =
      new BinaryMessageDecoder<userRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<userRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<userRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<userRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<userRecord>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this userRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a userRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a userRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static userRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence description;
  @Deprecated public java.lang.Integer id;
  @Deprecated public domain.avro.location location;
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.CharSequence screenName;
  @Deprecated public java.lang.CharSequence url;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public userRecord() {}

  /**
   * All-args constructor.
   * @param description The new value for description
   * @param id The new value for id
   * @param location The new value for location
   * @param name The new value for name
   * @param screenName The new value for screenName
   * @param url The new value for url
   */
  public userRecord(java.lang.CharSequence description, java.lang.Integer id, domain.avro.location location, java.lang.CharSequence name, java.lang.CharSequence screenName, java.lang.CharSequence url) {
    this.description = description;
    this.id = id;
    this.location = location;
    this.name = name;
    this.screenName = screenName;
    this.url = url;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return description;
    case 1: return id;
    case 2: return location;
    case 3: return name;
    case 4: return screenName;
    case 5: return url;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: description = (java.lang.CharSequence)value$; break;
    case 1: id = (java.lang.Integer)value$; break;
    case 2: location = (domain.avro.location)value$; break;
    case 3: name = (java.lang.CharSequence)value$; break;
    case 4: screenName = (java.lang.CharSequence)value$; break;
    case 5: url = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'location' field.
   * @return The value of the 'location' field.
   */
  public domain.avro.location getLocation() {
    return location;
  }


  /**
   * Sets the value of the 'location' field.
   * @param value the value to set.
   */
  public void setLocation(domain.avro.location value) {
    this.location = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'screenName' field.
   * @return The value of the 'screenName' field.
   */
  public java.lang.CharSequence getScreenName() {
    return screenName;
  }


  /**
   * Sets the value of the 'screenName' field.
   * @param value the value to set.
   */
  public void setScreenName(java.lang.CharSequence value) {
    this.screenName = value;
  }

  /**
   * Gets the value of the 'url' field.
   * @return The value of the 'url' field.
   */
  public java.lang.CharSequence getUrl() {
    return url;
  }


  /**
   * Sets the value of the 'url' field.
   * @param value the value to set.
   */
  public void setUrl(java.lang.CharSequence value) {
    this.url = value;
  }

  /**
   * Creates a new userRecord RecordBuilder.
   * @return A new userRecord RecordBuilder
   */
  public static domain.avro.userRecord.Builder newBuilder() {
    return new domain.avro.userRecord.Builder();
  }

  /**
   * Creates a new userRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new userRecord RecordBuilder
   */
  public static domain.avro.userRecord.Builder newBuilder(domain.avro.userRecord.Builder other) {
    if (other == null) {
      return new domain.avro.userRecord.Builder();
    } else {
      return new domain.avro.userRecord.Builder(other);
    }
  }

  /**
   * Creates a new userRecord RecordBuilder by copying an existing userRecord instance.
   * @param other The existing instance to copy.
   * @return A new userRecord RecordBuilder
   */
  public static domain.avro.userRecord.Builder newBuilder(domain.avro.userRecord other) {
    if (other == null) {
      return new domain.avro.userRecord.Builder();
    } else {
      return new domain.avro.userRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for userRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<userRecord>
    implements org.apache.avro.data.RecordBuilder<userRecord> {

    private java.lang.CharSequence description;
    private java.lang.Integer id;
    private domain.avro.location location;
    private domain.avro.location.Builder locationBuilder;
    private java.lang.CharSequence name;
    private java.lang.CharSequence screenName;
    private java.lang.CharSequence url;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(domain.avro.userRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.description)) {
        this.description = data().deepCopy(fields()[0].schema(), other.description);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.location)) {
        this.location = data().deepCopy(fields()[2].schema(), other.location);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasLocationBuilder()) {
        this.locationBuilder = domain.avro.location.newBuilder(other.getLocationBuilder());
      }
      if (isValidValue(fields()[3], other.name)) {
        this.name = data().deepCopy(fields()[3].schema(), other.name);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.screenName)) {
        this.screenName = data().deepCopy(fields()[4].schema(), other.screenName);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.url)) {
        this.url = data().deepCopy(fields()[5].schema(), other.url);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing userRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(domain.avro.userRecord other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.description)) {
        this.description = data().deepCopy(fields()[0].schema(), other.description);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.location)) {
        this.location = data().deepCopy(fields()[2].schema(), other.location);
        fieldSetFlags()[2] = true;
      }
      this.locationBuilder = null;
      if (isValidValue(fields()[3], other.name)) {
        this.name = data().deepCopy(fields()[3].schema(), other.name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.screenName)) {
        this.screenName = data().deepCopy(fields()[4].schema(), other.screenName);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.url)) {
        this.url = data().deepCopy(fields()[5].schema(), other.url);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.CharSequence getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public domain.avro.userRecord.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.description = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public domain.avro.userRecord.Builder clearDescription() {
      description = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Integer getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public domain.avro.userRecord.Builder setId(java.lang.Integer value) {
      validate(fields()[1], value);
      this.id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public domain.avro.userRecord.Builder clearId() {
      id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'location' field.
      * @return The value.
      */
    public domain.avro.location getLocation() {
      return location;
    }


    /**
      * Sets the value of the 'location' field.
      * @param value The value of 'location'.
      * @return This builder.
      */
    public domain.avro.userRecord.Builder setLocation(domain.avro.location value) {
      validate(fields()[2], value);
      this.locationBuilder = null;
      this.location = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'location' field has been set.
      * @return True if the 'location' field has been set, false otherwise.
      */
    public boolean hasLocation() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'location' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public domain.avro.location.Builder getLocationBuilder() {
      if (locationBuilder == null) {
        if (hasLocation()) {
          setLocationBuilder(domain.avro.location.newBuilder(location));
        } else {
          setLocationBuilder(domain.avro.location.newBuilder());
        }
      }
      return locationBuilder;
    }

    /**
     * Sets the Builder instance for the 'location' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public domain.avro.userRecord.Builder setLocationBuilder(domain.avro.location.Builder value) {
      clearLocation();
      locationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'location' field has an active Builder instance
     * @return True if the 'location' field has an active Builder instance
     */
    public boolean hasLocationBuilder() {
      return locationBuilder != null;
    }

    /**
      * Clears the value of the 'location' field.
      * @return This builder.
      */
    public domain.avro.userRecord.Builder clearLocation() {
      location = null;
      locationBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public domain.avro.userRecord.Builder setName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.name = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public domain.avro.userRecord.Builder clearName() {
      name = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'screenName' field.
      * @return The value.
      */
    public java.lang.CharSequence getScreenName() {
      return screenName;
    }


    /**
      * Sets the value of the 'screenName' field.
      * @param value The value of 'screenName'.
      * @return This builder.
      */
    public domain.avro.userRecord.Builder setScreenName(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.screenName = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'screenName' field has been set.
      * @return True if the 'screenName' field has been set, false otherwise.
      */
    public boolean hasScreenName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'screenName' field.
      * @return This builder.
      */
    public domain.avro.userRecord.Builder clearScreenName() {
      screenName = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'url' field.
      * @return The value.
      */
    public java.lang.CharSequence getUrl() {
      return url;
    }


    /**
      * Sets the value of the 'url' field.
      * @param value The value of 'url'.
      * @return This builder.
      */
    public domain.avro.userRecord.Builder setUrl(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.url = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'url' field has been set.
      * @return True if the 'url' field has been set, false otherwise.
      */
    public boolean hasUrl() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'url' field.
      * @return This builder.
      */
    public domain.avro.userRecord.Builder clearUrl() {
      url = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public userRecord build() {
      try {
        userRecord record = new userRecord();
        record.description = fieldSetFlags()[0] ? this.description : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.id = fieldSetFlags()[1] ? this.id : (java.lang.Integer) defaultValue(fields()[1]);
        if (locationBuilder != null) {
          try {
            record.location = this.locationBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("location"));
            throw e;
          }
        } else {
          record.location = fieldSetFlags()[2] ? this.location : (domain.avro.location) defaultValue(fields()[2]);
        }
        record.name = fieldSetFlags()[3] ? this.name : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.screenName = fieldSetFlags()[4] ? this.screenName : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.url = fieldSetFlags()[5] ? this.url : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<userRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<userRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<userRecord>
    READER$ = (org.apache.avro.io.DatumReader<userRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.description == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.description);
    }

    if (this.id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.id);
    }

    if (this.location == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.location.customEncode(out);
    }

    if (this.name == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.name);
    }

    if (this.screenName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.screenName);
    }

    if (this.url == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.url);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.description = null;
      } else {
        this.description = in.readString(this.description instanceof Utf8 ? (Utf8)this.description : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.id = null;
      } else {
        this.id = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.location = null;
      } else {
        if (this.location == null) {
          this.location = new domain.avro.location();
        }
        this.location.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.name = null;
      } else {
        this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.screenName = null;
      } else {
        this.screenName = in.readString(this.screenName instanceof Utf8 ? (Utf8)this.screenName : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.url = null;
      } else {
        this.url = in.readString(this.url instanceof Utf8 ? (Utf8)this.url : null);
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.description = null;
          } else {
            this.description = in.readString(this.description instanceof Utf8 ? (Utf8)this.description : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id = null;
          } else {
            this.id = in.readInt();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.location = null;
          } else {
            if (this.location == null) {
              this.location = new domain.avro.location();
            }
            this.location.customDecode(in);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.name = null;
          } else {
            this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.screenName = null;
          } else {
            this.screenName = in.readString(this.screenName instanceof Utf8 ? (Utf8)this.screenName : null);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.url = null;
          } else {
            this.url = in.readString(this.url instanceof Utf8 ? (Utf8)this.url : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










